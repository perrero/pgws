[% META
  description = 'Просмотр статей wiki';
  meta.todo.${template.name} = BLOCK %]
   Этот текст будет виден в отладочном режиме в конце страницы перед журнальным выводом<br/>
   Его назначение - фиксировать доработки конкретного шаблона.
  [% END;


  meta.head.timepicker = 1;
  meta.head.autocomplete = 1;
  meta.head.formev = 1;
  meta.head.highlight = 1;

  PROCESS 'macro/tabs.tt2';
  PROCESS 'macro/formfield.tt2';

  group_id = page.args.shift;
  group_code = page.args.shift;
  doc_path = page.args.shift;
  code = doc_path.remove('^/');
  doc_id = api('wiki.doc_id_by_code', id => group_id, code => code || undef);
  doc_class_id =  api('ws.class_id', code => 'doc');
  wiki_word_str =  api('wiki.doc_keyword', id => doc_id);
  IF doc_class_id;
    doc_class_status =  api('ws.class_status:7', class_id => doc_class_id);
  END ;
  view_uri = uri(code => page.up_code, id => doc_path);
  view_pathname = uri_mk(view_uri.req);
  IF !group_id;
    meta.status = '404';
    meta.status_note = 'Incorrect uri';
    STOP;
  END;
  can_do = api('acl:wiki.add', id => group_id);
  IF !doc_id && !can_do;
      meta.status = '403';
      meta.status_note = 'No access to create';
      STOP;
  END;
  IF !doc_id;
    src=l("Title: Заголовок\nTOC:   UnOrdered\n\nАннотация\n<!-- CUT -->\nТекст");
    save_method = 'wiki.add';
    save_name = l("Создать");
    up_link = { href => '', name => code };
  ELSE;
    save_method = 'doc.save';
    save_name = l("Сохранить");
    can_do = api('acl:doc.save', id => doc_id);
    # TODO: реализовать вариант, когда редактировать можно только атрибуты
    IF !can_do;
      meta.status = '403';
      meta.status_note = 'No access to save-' _ doc_id;
      STOP;
    END;
    info = api('wiki.doc_info', id => doc_id);
    name_doc_up = api('wiki.doc_info', id => info.up_id);
    resp.title =  info.name ? info.name : page.name;
    up_link = { href => view_pathname, name => info.name };

    src = api('wiki.doc_src', id => doc_id);
  END;
  # убрать из пути дубль ссылки на просмотр (страницы и раздела)
  meta.nopath_doubles = 1;
  IF code;
    # добавить в путь ссылку на просмотр
    meta.path_addon = [up_link];
    # TODO: в этот массив будем помещать путь по родительским страницам до корня вики
  END;
%]
<style>
  .affix {
    top: 0px;
    min-width:780px;
  }
  span .view{
   padding-top: 5px;
   display: inline-block;
  }
</style>

[%
div_begin(id='main');
div_end;

div_begin(class='tabbable');
  div_begin(class='tab-content');
   IF doc_id;
     div_begin(class='tab-pane', id='p-attr');
       div_begin(class='attrClass');
         form_begin(id='attr-form', action='js_required_but_not_available', onsubmit='return false;', class='form-horizontal well');
          fieldset_begin(name='Атрибуты');
          input(type='hidden', name='_sid', value=session.sid);
          input(type='hidden', name='id', value=doc_id); 
          input(type='hidden', name='up_id', id='up_id', value=info.up_id);
           div_begin(id='div_attr');
              controlGroup_begin(label = l("Текущий статус"));
                options=[];
                FOREACH s IN doc_class_status;
                  IF s.id == info.status_id; 
                   options.push(value=s.id, selected = 1, text= s.name);
                  ELSE; 
                   options.push(value=s.id, text= s.name);
                  END; 
                 END; 
                span(class='editable', text=''_ select(options=options, id='status_id', name='status_id', class='edit hide') _ span(class='view'));
           controlGroup_end;
           controlGroup_begin(label = l("Следующий статус")); 
            options=[];
            FOREACH s IN doc_class_status; 
               IF s.id == info.status_next_id; 
                options.push(value=s.id, selected = 1, text= s.name);
               ELSE; 
                options.push(value=s.id, text= s.name);
               END; 
             END; 
            span(class='editable', text='' _ select(options=options, id='nextStatus', name='status_next_id', class='edit hide') _ span(class='view'));
            l("от");
            span(class='editable',text='' _ input(id='date', name='status_next_at', value=info.status_next_at, class='edit hide') _ span(class='view'));
            controlGroup_end;
            controlGroup_begin(label = l("Родительская статья"));
            span(class='editable', text='' _ input(id='autoc', value=name_doc_up.name, class='edit hide') _ span(class='view'));
          controlGroup_end;
          controlGroup_begin(label = l("Ключевые слова")); 
          div_begin(id='keyword', size=7);
             FOREACH this = wiki_word_str;
              div_begin(style='float:left;margin-left:5px;margin-right:5px;padding-top:5px;');
                this;
                input(type='hidden', name='keywords', value=this);
               l("&nbsp;");
               %]<a href='#' onClick='PGWS.delThis(this); return false;' class="edit hide close" title="Удалить">&times;</a>
            [% div_end;
             END; 
            div_end;
            div_begin(class='div_button');
            span(class='editable', text=input(id='inputnewkey', class='edit hide span1'));
            btn(onclick='PGWS.addWord()', class='edit hide', name=l("Добавить новое ключевое слово"));
          div_end;
          controlGroup_end;
        div_end;%]
        <br/><br/>
        [% div_begin(class='buttons form-actions');
	  btn(class='view edit_on', name=l("Изменить")); 
          btn(class='edit save hide', name=l("Сохранить"));
          btn(class='edit reset hide', name=l("Отмена"));
        div_end;
      fieldset_end;
      form_end; 
      div_end;
      fieldset_begin(name='Файлы');
         INCLUDE block/fs/file_upload.tt2 obj_id = doc_id, list_method = 'wiki.fs_files'
      fieadset_end;
  div_end;   
  END;
    div_begin(class='tab-pane', id='p-edit');
    form_begin(id='main-form', action='js_required_but_not_available', onsubmit='return false;'); 
          input(type='hidden', name='uri', value=req.prefix _ '/' _ group_code); 
          input(type='hidden', name='code', value=code);
 IF doc_id; 
          input(type='hidden', name='extended', value=1);
          input(type='hidden', name='id', value=doc_id);
          input(type='hidden', name='revision', value=info.revision);
 ELSE; 
        input(type='hidden', name='id', value=group_id);
 END;
        markdown(rows=10, class="span10", name="src", value=src);
      form_end; 
  div_end;
  div_begin(class='tab-pane', id='wikibody');
  div_end;
  div_begin(class='tab-pane', id='p-diff');%]
    <pre id="diff-src" class="diff"></pre>
  [% div_end;
  div_begin(class='tab-pane', id='p-src');%]
    <pre id="html-src" class="html"></pre>
  [% div_end;
 div_end;
 alert_begin(type='error error', id='errors'); alert_end; 
 div_begin(id='main-form__err', class='error');div_end;
 div_begin(id='main-form_src_err', class='error');div_end;
 alert_begin(type='info', id='status'); alert_end;
div_end;
 
INCLUDE "block/wiki/style_js.tt2";
meta.js.${meta.js.size} = BLOCK %]
<style>
  .saveTab{
    font-weight:bold;
  }
</style>
<script type="text/javascript">
//<![CDATA[

if (PGWS.var === undefined) { PGWS.var = {}; }

PGWS.var.edit = {
    links : [[% IF doc_id %]['Атрибуты','p-attr'],[% END; %]['Редактор','p-edit'],['Просмотр','wikibody','review'],['Изменения','p-diff','review'],['HTML','p-src','review'],['[% save_name %]','','saveTab']],
    html: '<ul class ="nav nav-tabs" data-spy="affix" class="affix-top">',
    index: location.href.indexOf('#'),
    wikiChanged: 0,
    msg_created : '[% l("Документ создан") %]',
    msg_updated : '[% l("Документ изменен") %]',
    view_name  	: '[% l("Актуальная версия") %]',
    view_path   : '[% view_pathname %]',
    page_html   : '[% l("нет данных") %]',
    page_diff   : '[% l("нет данных") %]',
    acl_wikisave : [% can_do %], //права на сохранение
    open_editable : 1
};


$(PGWS.var.edit.links).each(function(i){
  var saveClass='';
  if (typeof(this[2]) != "undefined"){
    saveClass = ' '+this[2];
  };
  if(PGWS.var.edit.index<0 && i == 0){
    PGWS.var.edit.html+='<li class="active'+saveClass+'"><a class="'+(saveClass.length>0 ? '' : 'ajax ')+'active" href="#'+this[1]+'" data-toggle="tab">'+this[0]+'</a></li>';
    $('#'+this[1]).addClass('active');
  return;
  }
  if(PGWS.var.edit.index>=0){
    if(this[1] == location.href.substring(PGWS.var.edit.index+1)){
      PGWS.var.edit.html+='<li class="active'+saveClass+'"><a class="'+(saveClass.length>0 ? '' : 'ajax ')+'active" href="#'+this[1]+'" data-toggle="tab">'+this[0]+'</a></li>';
    $('#'+this[1]).addClass('active');
      return;
    }
  }
  PGWS.var.edit.html+='<li'+(saveClass.length>0 ? ' class='+saveClass : '')+'><a '+(saveClass.length>0 ? '' : 'class="ajax"')+' href="#'+this[1]+'" data-toggle="tab">'+this[0]+'</a></li>';
});
PGWS.var.edit.html+='</ul>';
$('#main').html(PGWS.var.edit.html);
[% #// TODO: добавить вкладкам onClick="return PGWS.formSend('main', '[% save_method % ]', false)"
#// false - отключает переход на следующую вкладку при выставленном чекбоксе
%]
/* ------------------------------------------------------------------------- */
// Управление вкладками
PGWS.tabSelected = function(objActive){
if(!$(objActive).parent().hasClass("saveTab")){
  $(".ajax").removeClass("active");
  $(".ajax").parent('li').removeClass("active");
  $(objActive).addClass("active");
  $(objActive).parent('li').addClass("active");
  $('.tab-content').find('.tab-pane').removeClass('active');
  PGWS.var.edit.index = $(objActive).attr('href').indexOf('#');
  $('#' + $(objActive).attr('href').substring(PGWS.var.edit.index+1)).addClass('active');
  if(PGWS.var.edit.wikiChanged){
      PGWS.formSend('main', 'doc.format');
      PGWS.var.edit.wikiChanged = 0
    }
  }else{
    PGWS.formSend('main', '[% save_method %]', true);
  }
};

/* ------------------------------------------------------------------------- */
// Инициализация вкладки

PGWS.page = {
  titleSuffix: '[% resp.title _ " - " _ our_title %]',
};
/* ------------------------------------------------------------------------- */
// Инициализация основной страницы

PGWS.initAjaxUrl = function(){
  $('.ajax').ajaxUrl({
    onSuccess:  PGWS.tabSelected,
    titleSuffix: PGWS.page.titleSuffix,
    classMenuItemActive:'.active'
  });
};

$(document).ready(function(){

  $('.nav-tabs').affix({
    offset: $('.nav-tabs').position()
  });

  PGWS.initAjaxUrl();
  $('textarea[name=src]').bind('input',function(){ 
    PGWS.var.edit.wikiChanged = 1; 
    $('.review').removeClass('disabled');
    $('.saveTab').removeClass('disabled');
    $('.review a').addClass('ajax');
    $('.saveTab a').addClass('ajax');
    PGWS.initAjaxUrl();
  });
  $('.review').addClass('disabled');
  $('.saveTab').addClass('disabled');
  $('.disabled').find('a').click(function(e){return false;});
});



PGWS.toggleChk = function(b,idx) {
  c=$("#is_view" + idx);
  c.attr("checked", $(b).attr("checked"));
  return true;
};

PGWS.formSend = function(id, action, t) {
  $('#status').text('');
  $('div.error').text('');
  var form_id = '#' + id + '-form';
  if (t){
    api_form(action, form_id, PGWS.formOK2, PGWS.formErr);
  }else{
    api_form(action, form_id, PGWS.formOK, PGWS.formErr);
  }
  return false;
};
PGWS.delThis = function(l){        //функция для удаления слова из ключевой строки
  $(l).parent().remove();
};
PGWS.addWord = function(){       //добавляем новое слово в ключевую строку
  obj =  $("#inputnewkey");
  if($(obj).val().trim().length>0){
    $("#keyword").html($("#keyword").html()+PGWS.constructorDivKeyWord($(obj).val()));
    $(obj).val("")
  }
};

PGWS.constructorDivKeyWord = function(param){
  return "<div style='float:left;margin-left:5px;margin-right:5px;padding-top:5px;'>"+param+"<input type=\"hidden\" name=\"keywords\" value=\""+param+"\"/>&nbsp;<a href='#' onClick='PGWS.delThis(this); return false;' class='edit hide close' title='Удалить' style='display:inline;'>&times;</a></div>";
};
PGWS.formOK2 = function(formid, res) {
  window.location.href = '[% view_pathname %]';
};
PGWS.formOK = function(formid, res) {
  if (typeof res == 'number') {
    // redirect to view page
    var m = (res == 1)?PGWS.var.edit.msg_created:PGWS.var.edit.msg_updated;
    $('#status').text(m);
    // window.location.pathname = PGWS.var.edit.view_path;
    window.location.reload(false);
  } else {
    document.title = res.name;
    PGWS.var.edit.page_html = res.html;
    page_diff = res.diff;
    $('#html-src').text(PGWS.var.edit.page_html).each(function(i, e) {hljs.highlightBlock(e, null)});
    $('#diff-src').text(res.diff).each(function(i, e) {hljs.highlightBlock(e, null)});
    $('#wikibody').html(PGWS.var.edit.page_html).each(function(i, e) {hljs.highlightBlock(e, null)});
    PGWS.wikiStyle('wikibody');
    if ($('#is_view0').is(':checked')) {
      $('.nav-tabs').find('.active').next().children("a.ajax").click();
      $('html, body').scrollTop(0);
    }
  }
};

PGWS.saveAttr = function(container, cbSaveSuccess, cbFormDisable, cbFormEnable) {
  api_form( 'wiki.doc_update_attr',  '#attr-form',  function(){
    cbFormEnable(container);
    cbSaveSuccess(container);
  });
};

PGWS.formErr = function(formid, res) {
  if (res.result && res.result.error) {
    $('#errors').text(res.result.error[0].message);
  }
$('#status').html('<a href="' + PGWS.var.edit.view_path + '">'+ PGWS.var.edit.view_name +'</a>');
  $('html, body').scrollTop($("#errors").offset().top);
};

$(document).ready(function(){
 if (PGWS.var.edit.acl_wikisave){
    $(".button_change").show();
  }
  if(!PGWS.var.edit.acl_wikisave){
    $("#main").hide();
  }
});
$(function() {
  $("#date").datetimepicker({minDate: 0}); //дата-время не раньше текущего
});

$(document).ready(function(){
   $( "#autoc" ).typeahead({
    source: function( request, response ) {
      $.ajax({
        url: "[% req.prefix %]/_wiki.doc_by_name.json",
        dataType: "json",
        data: {
          id: "[% group_id %]",
          string: request
        },
        success: function( data ) {
          if(typeof data.result.data != 'undefined'){
          if(data.result.data != null){
	    var dataArray = new Array();
	      $.map( data.result.data, function(item) {
		var group = {
		  id: item.id,
		  name: item.name
		};
              dataArray.push(group);
	      });
	     response(dataArray);
            }
          }
        }
      });
    },
    matcher: function (item) {
      if (item.name.toLowerCase().indexOf(this.query.trim().toLowerCase()) != -1) {
	  return true;
	}
    },
    sorter: function (items) {
      return items.sort();
    },
    highlighter: function (item) {
      var regex = new RegExp( '(' + this.query + ')', 'gi' );
      label = item.name;
      return label.replace( regex, "<strong>$1</strong>" );
    },
    items: 9999,
    updater:function (item) {

        //item = selected item
        //do your stuff.

        //dont forget to return the item to reflect them into input
        return item;
    }
  });
  $( "#inputnewkey" ).typeahead({
    source: function( request, response ) {
      $.ajax({
        url: "[% req.prefix %]/_wiki.keyword_by_name.json",
        dataType: "json",
        data: {
          id: "[% group_id %]",
          string: request
        },
        success: function( data ) {
          if(typeof data.result.data != 'undefined'){
          if(data.result.data != null){
	    var dataArray = new Array();
	      $.map( data.result.data, function(item) {
		var group = {
		  id: item,
		  name: item
		};
              dataArray.push(group);
	      });
	     response(dataArray);
            }
          }
        }
      });
    },
    matcher: function (item) {
      if (item.id.toLowerCase().indexOf(this.query.trim().toLowerCase()) != -1) {
	  return true;
	}
    },
    sorter: function (items) {
      return items.sort();
    },
    highlighter: function (item) {
      var regex = new RegExp( '(' + this.query + ')', 'gi' );
      label = item.id;
      return label.replace( regex, "<strong>$1</strong>" );
    },
    items: 9999
  });
  /*********************************
  ******formEV инициализация********
  *********************************/
  PGWS.hideText = function(c){
    $(c).find('input').hide();
  };
  $(".attrClass").formEV({onSubmit:PGWS.saveAttr,onViewReady:PGWS.hideText});      
  $(document).ready(function(){
  if(PGWS.var.edit.open_editable){
    $('.edit_on').click();
  }
  });
  /********************************/
  $(".nav-tabs").css("background-color",$("body").css("background-color"));
  $.fn.typeahead.Constructor.prototype.render = function(items) {
     var that = this;
 
     items = $(items).map(function (i, item) {
       i = $(that.options.item).attr('data-value', item.id).attr('data-label', item.name);
       i.find('a').html(that.highlighter(item));
       return i[0];
     })
 
     this.$menu.html(items);
     return this;
};
$.fn.typeahead.Constructor.prototype.next = function (event) {
  var active = this.$menu.find('.active').removeClass('active');
  next = active.next();
  if (!next.length) {
    next = $(this.$menu.find('li')[0]);
  }
  next.addClass('active');
  $(this.$element).val($(next).attr('data-label'));
};
$.fn.typeahead.Constructor.prototype.prev = function (event) {
  var active = this.$menu.find('.active').removeClass('active');
   prev = active.prev();
   if (!prev.length) {
    prev = this.$menu.find('li').last();
   }
  prev.addClass('active');
  $(this.$element).val($(prev).attr('data-label'));
};
$.fn.typeahead.Constructor.prototype.select = function(e) {
  var val = this.$menu.find('.active').attr('data-value');
  $(this.$element).val(this.$menu.find('.active').text());
  if($(this.$element).attr('id')=='autoc'){
    $('#up_id').val(val);
  }
  this.hide();
};
});
//]]>
</script>
[% END; # BLOCK 
  INCLUDE "block/wiki/style_js.tt2";
%]
